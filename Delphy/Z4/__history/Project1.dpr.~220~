Program Laba4;

Uses
    SysUtils;

Type
    TErrors = (FailFileOpen = 0,
        FailFileCreateOrOpen = 1,
        FailData = 2,
        FailLimitOfData = 3);
    TMatrix = Array of Array of integer;

Const
    ERRORS:array[0..3] of string = (
        'Не удалось открыть файл или прочитать данные. Попробуйте еще раз, проверив путь и имя файла.',
        'Не удалось открыть или создать файл. Попробуйте еще раз, проверив путь и имя файла.',
        'Некорректные данные данные. Попробуйте еще раз.',
        'Ваше значение не соответствует числовым ограничениям. Попробуйте еще раз.');

procedure InWithChecking(var a: integer; const MAX_LIMIT, MIN_LIMIT: integer);
var
    isFail: boolean;
Begin
    isFail := false;

    try
        readln(a);
    except
        isFail := true;
    end;

    if isFail then
    begin
        writeln(ERRORS[Ord(FailData)]);
        inWithChecking(a, MAX_LIMIT, MIN_LIMIT);
    end
    else if (A > MAX_LIMIT) or (a < MIN_LIMIT) then
    begin
        writeln(ERRORS[Ord(FailLimitOfData)]);
        inWithChecking(a, MAX_LIMIT, MIN_LIMIT);
    end
End;

procedure OpenOutFile(Var Fout: Text);
Var
    IsFailToOpen: Boolean;
    FileName: String;
Begin
    Repeat
        IsFailToOpen := false;

        Write(#10#13, 'Введите путь к файлу .txt для ввода данных: ');
        readln(FileName);
        Assign(Fout, FileName);

        Try
            Rewrite(Fout);
        Except
            IsFailToOpen := True;
            Writeln(ERRORS[Ord(FailFileCreateOrOpen)]);
        End;
    Until Not isFailToOpen;
End;

function FileInputWithChecking(Var Fin: Text; Var Num: Integer; Const MAX_LIMIT, MIN_LIMIT: Integer): Boolean;
Var
    IsFail: Boolean;
Begin 
    IsFail := False;
    
    Try
        Read(Fin, Num);
    Except
        IsFail := True;
        Writeln(ERRORS[Ord(FailData)]);
    End;

    If (Num > MAX_LIMIT) Or (Num < MIN_LIMIT) Then
    Begin
        IsFail := True;
        writeln(ERRORS[Ord(FailLimitOfData)]);
    End;

    FileInputWithChecking := isFail;
End;

procedure OpenFileAndInput(Var N: Integer; Var Matrix: TMatrix; Const MAX_LIMIT, MIN_LIMIT: Integer);
Var
    FileName: string;
    IsFailToOpen: boolean;
    I, J: Integer;
    Fin: Text;
Begin
    Repeat
        IsFailToOpen := false;

        Write(#10#13, 'Введите путь к файлу .txt для ввода данных: ');
        readln(FileName);
        Assign(Fin, FileName);

        Try
            Reset(Fin);
        Except
            IsFailToOpen := True;
            Writeln(ERRORS[Ord(FailFileOpen)]);
        End;

        If Not IsFailToOpen Then
            IsFailToOpen := FileInputWithChecking(Fin, N, MAX_LIMIT, MIN_LIMIT);

        if Not IsFailToOpen then
        Begin
          N := N * 2;
          SetLength(Matrix, N);
          
          For I := 0 To N - 1 Do
          Begin
              SetLength(Matrix[i], N);
              For J := 0 To N - 1 Do
                  if Not IsFailToOpen then
                      IsFailToOpen := FileInputWithChecking(Fin, Matrix[I, J], MAX_LIMIT, -MAX_LIMIT);
          End;
        End;
    Until Not isFailToOpen;
    Close(Fin);
End;

procedure ChangeMatrix(var Matrix: TMatrix; N: Integer);
Var 
    NewMatrix: TMatrix;
    I, J, Middle: Integer;
Begin
    SetLength(NewMatrix, N);
    for I := 0 to N - 1 do
        SetLength(NewMatrix[i], N);
        
    Middle := N Div 2;

    For I := 0 To N - 1 Do
        For J := 0 To N - 1 Do
            if I < Middle then
                if J < Middle then
                    NewMatrix[I + Middle, J + Middle] := Matrix[I, J]
                else
                    NewMatrix[I + Middle, J - Middle] := Matrix[I, J]
            else
                if J < Middle then
                    NewMatrix[I - Middle, J] := Matrix[I, J]
                else
                    NewMatrix[I - Middle, J] := Matrix[I, J];

    For I := 0 To N - 1 Do
        For J := 0 To N - 1 Do
            Matrix[I, J] := NewMatrix[I, J];
End;

Procedure ExitProgram();
Begin
    Writeln('Для выхода из программы нажмите Enter...');
    readln;
End;


Const
    MAX_LIMIT = 100;
    MIN_LIMIT = 0;
Var
    N, InType, I, J, OutType: Integer;
    Matrix: TMatrix;
    Fout: Text;

Begin
    Writeln('Программа для изменения положения подматриц квадратной матрицы порядка 2n.');

    Writeln('Все значения матрицы должны быть от', -MAX_LIMIT, ' до ', MAX_LIMIT, '.');
    Writeln('Порядок матрицы n должен быть от ', MIN_LIMIT, ' до ', MAX_LIMIT, '.');

    InType := 0;
    Writeln('Введите предпочетаемый тип ввода данных: ');
    Writeln(#9, '1 - из консоли (по элементу),', #13#10#9, '2 - из файла (одна строка n, дальше элементы в виде таблицы).');
    inWithChecking(InType, 2, 1);

    If InType = 1 Then
    Begin
        Writeln(#10#13, 'Введите порядок квадратной матрицы 2n.');
        InWithChecking(N, MAX_LIMIT, MIN_LIMIT);
        N := N * 2;

        SetLength(Matrix, N);

        For I := 0 To N - 1 Do
        Begin
            SetLength(Matrix[I], N);
            For J := 0 To N - 1 Do
            Begin
                Writeln(#10#13, 'Введите элемент матрицы [', I + 1, ', ', J + 1, ']');
                InWithChecking(Matrix[i][j], MAX_LIMIT, -MAX_LIMIT);
            End;
        End;
    End
    Else
    Begin
        OpenFileAndInput(n, Matrix, MAX_LIMIT, MIN_LIMIT);
    End;

    ChangeMatrix(Matrix, N);

    OutType := 0;
    Writeln('Введите предпочетаемый тип вывода данных: ');
    Writeln(#9, '1 - только в консоль,', #13#10, #9, '2 - в консоль и в файл.');
    inWithChecking(OutType, 2, 1);

    if OutType = 2 then
        OpenOutFile(Fout);
    
    Writeln;
    For I := 0 To N - 1 Do
    Begin
        For J := 0 To N - 1 Do
        Begin
            Write(Matrix[I, J], ' ');
            if OutType = 2 then
                Write(Fout, Matrix[I, J], ' ');
        End;
        Writeln;
        If outType = 2 Then
            Writeln(Fout, ' ');
    End;
    Writeln;

    if OutType = 2 then
        close(fout);

    ExitProgram();
End.
