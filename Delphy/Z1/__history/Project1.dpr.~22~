Program Project1;

{$APPTYPE CONSOLE}
{$R *.res}

Uses
    System.SysUtils;

Type
    TError = (FailData, FailLimitOfData, FigureError);

Const
    ERRORS: Array [0 .. 2] Of String =
        ('Некорректные данные. Попробуйте еще раз. ',
        'Ваше значение не соответствует числовым ограничениям. Попробуйте еще раз. ',
        'Фигура заданными координатами не образует многоугольника');
    MIN_LIMIT = -1000;
    MAX_LIMIT = 1000;

Var
    I, CountOfPoints, sign, vectorSum, signOfVectorSum: Integer;
    firstIndex, secondIndex, thirdIndex:Integer;
    firstLineX, firstLineY, secondLineX, secondLineY: Integer;
    IsFail, isEndOfFor: Boolean;
    PointX, PointY: Array Of Integer;

Begin

    Writeln('Программа для определения, является ли многоугольник выпуклым или нет?');

    Write(#10#13, 'Введите количество вершин многоугольника от ', 3, ' до ',
        MAX_LIMIT, ': ');
    Repeat
        IsFail := False;

        Try
            Readln(CountOfPoints);
        Except
            Write(ERRORS[Ord(FailData)]);
            IsFail := True;
        End;

        If Not IsFail And ((CountOfPoints > MAX_LIMIT) Or
            (CountOfPoints < 3)) Then
        Begin
            Write(ERRORS[Ord(FailLimitOfData)]);
            IsFail := True;
        End;
    Until Not IsFail;

    SetLength(PointX, CountOfPoints);
    SetLength(PointY, CountOfPoints);

    For I := 0 To High(PointX) Do
    Begin
        Writeln('Введите координаты вершины (x, y) от ', MIN_LIMIT, ' до ',
            MAX_LIMIT, ' #', I + 1, ':');
        Repeat
            IsFail := False;

            Try
                Readln(PointX[I], PointY[I]);
            Except
                Write(ERRORS[Ord(FailData)]);
                IsFail := True;
            End;

            If Not IsFail And
                ((PointX[I] > MAX_LIMIT) Or (PointX[I] < MIN_LIMIT) Or
                (PointY[I] > MAX_LIMIT) Or (PointY[I] < MIN_LIMIT)) Then
            Begin
                Write(ERRORS[Ord(FailLimitOfData)]);
                IsFail := True;
            End;
        Until Not IsFail;

        inc(pointX[i], MAX_LIMIT);
        inc(pointY[i], MAX_LIMIT);
    End;

    Sign := -2;
    isEndOfFor := false;

    for I := 0 to High(pointX) do
    Begin
        FirstIndex := I;
        secondIndex := (i + 1) mod countOfPoints;
		thirdIndex := (i + 2) mod countOfPoints;

        firstLineX := pointX[secondIndex] - pointX[FirstIndex];
		firstLineY := pointY[secondIndex] - pointY[FirstIndex];
		secondLineX := pointX[thirdIndex] - pointX[secondIndex];
		secondLineY := pointY[thirdIndex] - pointY[secondIndex];

        vectorSum := (firstLineX * secondLineY - secondLineX * firstLineY);

        if VectorSum = 0 then
            signOfVectorSum := 0
        else if VectorSum > 0 then

    End;


End.
